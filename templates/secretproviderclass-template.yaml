# Template for SecretProviderClass using ConfigMap values
# This shows how to reference Azure configuration from ConfigMaps instead of hardcoded values
#
# Usage: This template demonstrates the secure approach where Azure credentials
# are provided via ConfigMaps created at deployment time, not committed to Git.
#
# The actual SecretProviderClass manifests should be updated to use:
# - configMapKeyRef for clientId and tenantId
# - Environment variables or init containers to populate these values
# - Kubernetes native configuration injection instead of placeholder replacement

apiVersion: secrets-store.csi.x-k8s.io/v1
kind: SecretProviderClass
metadata:
  name: example-secret-provider-class
  namespace: example-namespace
spec:
  provider: azure
  parameters:
    usePodIdentity: "false"
    # These values will be provided by the ConfigMap created during deployment
    # Option 1: Use environment variables set from ConfigMap in the pod
    clientID: "" # Will be set via environment variable from azure-config ConfigMap
    tenantId: "" # Will be set via environment variable from azure-config ConfigMap
    keyvaultName: "" # Will be set via environment variable from azure-config ConfigMap
    objects: |
      array:
        - |
          objectName: example-secret
          objectType: secret
          objectVersion: ""
  secretObjects:
    - secretName: example-k8s-secret
      type: Opaque
      data:
        - objectName: example-secret
          key: secret-key

---
# Example Pod showing how to use ConfigMap values
apiVersion: v1
kind: Pod
metadata:
  name: example-pod
  namespace: example-namespace
spec:
  serviceAccountName: workload-identity-sa
  containers:
  - name: app
    image: example:latest
    env:
    - name: AZURE_CLIENT_ID
      valueFrom:
        configMapKeyRef:
          name: azure-config
          key: AZURE_CLIENT_ID
    - name: AZURE_TENANT_ID
      valueFrom:
        configMapKeyRef:
          name: azure-config
          key: AZURE_TENANT_ID
    - name: AZURE_KEYVAULT_NAME
      valueFrom:
        configMapKeyRef:
          name: azure-config
          key: AZURE_KEYVAULT_NAME
    volumeMounts:
    - name: secrets-store
      mountPath: "/mnt/secrets-store"
      readOnly: true
  volumes:
  - name: secrets-store
    csi:
      driver: secrets-store.csi.k8s.io
      readOnly: true
      volumeAttributes:
        secretProviderClass: "example-secret-provider-class"

---
# Alternative: Use initContainer to template the SecretProviderClass
apiVersion: v1
kind: ConfigMap
metadata:
  name: secretproviderclass-template
  namespace: example-namespace
data:
  template.yaml: |
    apiVersion: secrets-store.csi.x-k8s.io/v1
    kind: SecretProviderClass
    metadata:
      name: templated-secret-provider-class
      namespace: example-namespace
    spec:
      provider: azure
      parameters:
        usePodIdentity: "false"
        clientID: "${AZURE_CLIENT_ID}"
        tenantId: "${AZURE_TENANT_ID}"
        keyvaultName: "${AZURE_KEYVAULT_NAME}"
        objects: |
          array:
            - |
              objectName: example-secret
              objectType: secret
              objectVersion: ""
