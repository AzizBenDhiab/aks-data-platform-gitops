# Final PostSync Hook - Downloads SQL script and fixes setup/admin issues
apiVersion: batch/v1
kind: Job
metadata:
  name: joget-db-setup
  namespace: joget
  annotations:
    argocd.argoproj.io/hook: PostSync
    argocd.argoproj.io/hook-weight: "1"
    argocd.argoproj.io/hook-delete-policy: HookSucceeded
spec:
  template:
    spec:
      restartPolicy: OnFailure
      volumes:
      - name: secrets-store
        csi:
          driver: secrets-store.csi.k8s.io
          readOnly: true
          volumeAttributes:
            secretProviderClass: "joget-secrets"
      containers:
      - name: db-setup
        image: postgres:13-alpine
        command: ['sh', '-c']
        args:
        - |
          echo "Starting Joget database setup with fixes..."
          
          # Install curl for downloading
          apk add --no-cache curl
          
          # Wait for PostgreSQL to be ready
          echo "Waiting for PostgreSQL to be ready..."
          until pg_isready -h postgresql -p 5432 -U joget_user; do
            echo "PostgreSQL is not ready yet, waiting..."
            sleep 5
          done
          echo "PostgreSQL is ready"
          
          # Wait for Joget to initialize
          echo "Waiting for Joget to initialize tables..."
          for i in $(seq 1 60); do
            if psql -h postgresql -U joget_user -d joget -c "SELECT 1;" 2>/dev/null; then
              echo "Database connection established"
              break
            fi
            echo "Attempt $i/60: Database not ready yet, waiting 10s..."
            sleep 10
          done
          
          sleep 30  # Give Joget time to create schema
          
          echo "Cleaning existing database content..."
          
          # Clean existing data using DELETE (avoids permission issues)
          psql -h postgresql -U joget_user -d joget << 'EOF'
          \echo 'Starting database cleanup...'
          
          -- Clean user-related tables first (handle foreign keys)
          DELETE FROM dir_user_role;
          DELETE FROM dir_user_group;
          DELETE FROM dir_user_meta;
          DELETE FROM dir_user_password_history;
          DELETE FROM dir_user_replacement;
          DELETE FROM dir_employment_report_to;
          DELETE FROM dir_employment;
          DELETE FROM dir_user;
          DELETE FROM dir_group;
          DELETE FROM dir_role;
          DELETE FROM dir_grade;
          DELETE FROM dir_organization;
          DELETE FROM dir_department;
          
          -- Clean app tables
          DELETE FROM app_form_data_audit_trail;
          DELETE FROM app_package_activity_form;
          DELETE FROM app_package_activity_plugin;
          DELETE FROM app_package_participant;
          DELETE FROM app_report_activity_instance;
          DELETE FROM app_report_activity;
          DELETE FROM app_report_process_instance;
          DELETE FROM app_report_process;
          DELETE FROM app_report_package;
          DELETE FROM app_report_app;
          DELETE FROM app_fd_appcenter;
          DELETE FROM app_fd;
          DELETE FROM app_builder;
          DELETE FROM app_env_variable;
          DELETE FROM app_plugin_default;
          DELETE FROM app_resource;
          DELETE FROM app_message;
          DELETE FROM app_userview;
          DELETE FROM app_datalist;
          DELETE FROM app_form;
          DELETE FROM app_package;
          DELETE FROM app_app;
          
          \echo 'Database cleanup completed'
          EOF
          
          echo "Downloading SQL script from Git repository..."
          
          # Download your actual SQL script
          curl -L -o /tmp/jwdb-postgres.sql \
            "https://raw.githubusercontent.com/AzizBenDhiab/aks-data-platform-gitops/main/argocd/scripts/jwdb-postgres.sql"
          
          if [ ! -f /tmp/jwdb-postgres.sql ]; then
            echo "Failed to download SQL script!"
            exit 1
          fi
          
          echo "Script downloaded. Size: $(wc -l < /tmp/jwdb-postgres.sql) lines"
          
          echo "Running SQL script..."
          # Execute the script
          psql -h postgresql -U joget_user -d joget -f /tmp/jwdb-postgres.sql
          
          echo "Applying post-installation fixes..."
          # Read admin password from mounted secret 
          ADMIN_PASSWORD=$(cat /mnt/secrets-store/joget-admin-password)
          # Critical fixes for setup and admin user
          psql -h postgresql -U joget_user -d joget << 'EOF'
          \echo 'Applying essential fixes...'
          
          -- Fix 1: Ensure admin user is active (critical for login)
          UPDATE dir_user SET active = 1 WHERE username = 'admin';

          # Fix 2: Ensure admin user has proper password hash using secure hashing
          psql -h postgresql -U joget_user -d joget << EOF
          UPDATE dir_user 
          SET password = crypt('$ADMIN_PASSWORD', gen_salt('bf'))
          WHERE username = 'admin';
          EOF
          -- Fix 3: Mark setup as completed in wf_setup table (prevents setup redirect)
          INSERT INTO wf_setup (id, property, value, ordering)
          VALUES ('setupCompleted', 'setupCompleted', 'true', 0)
          ON CONFLICT (id) DO UPDATE SET value = 'true';
          
          -- Fix 4: Create app_info table if missing and mark setup complete
          CREATE TABLE IF NOT EXISTS app_info (
              id VARCHAR(255) PRIMARY KEY,
              value TEXT
          );
          
          INSERT INTO app_info (id, value)
          VALUES ('setupCompleted', 'true')
          ON CONFLICT (id) DO UPDATE SET value = 'true';
          
          -- Fix 5: Ensure admin has admin group membership
          INSERT INTO dir_group (id, name, description)
          VALUES ('adminGroup', 'Administrators', 'System Administrators')
          ON CONFLICT (id) DO NOTHING;
          
          INSERT INTO dir_user_group (groupId, userId)
          VALUES ('adminGroup', 'admin')
          ON CONFLICT DO NOTHING;
          
          -- Fix 6: Ensure admin has admin role
          INSERT INTO dir_role (id, name, description)
          VALUES ('adminRole', 'Administrator', 'System Administrator Role')
          ON CONFLICT (id) DO NOTHING;
          
          INSERT INTO dir_user_role (roleId, userId)
          VALUES ('adminRole', 'admin')
          ON CONFLICT DO NOTHING;
          
          \echo 'Essential fixes completed'
          EOF
          
          echo "Verifying final setup..."
          psql -h postgresql -U joget_user -d joget << 'EOF'
          \echo 'Final verification:'
          
          -- Check table count
          SELECT COUNT(*) as total_tables FROM information_schema.tables WHERE table_schema = 'public';
          
          -- Check admin user status
          SELECT username, active, 
                 CASE WHEN password IS NOT NULL THEN 'SET' ELSE 'NULL' END as password_status
          FROM dir_user WHERE username = 'admin';
          
          -- Check setup completion status
          SELECT 'Setup Status:' as info;
          SELECT property, value FROM wf_setup WHERE property = 'setupCompleted';
          SELECT id, value FROM app_info WHERE id = 'setupCompleted';
          
          -- Check admin group/role membership
          SELECT 'Admin Groups:' as info, COUNT(*) as count FROM dir_user_group WHERE userId = 'admin';
          SELECT 'Admin Roles:' as info, COUNT(*) as count FROM dir_user_role WHERE userId = 'admin';
          
          \echo 'Joget database setup and fixes completed successfully!'
          EOF
          
          echo "All setup completed! Joget should now be accessible with admin/admin"
        env:
        - name: PGPASSWORD
          valueFrom:
            secretKeyRef:
              name: joget-secrets
              key: joget-password
        volumeMounts:
        - name: secrets-store
          mountPath: "/mnt/secrets-store"
          readOnly: true
      serviceAccountName: joget-workload-identity