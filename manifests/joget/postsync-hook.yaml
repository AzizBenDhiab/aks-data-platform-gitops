# PostSync Hook that downloads your SQL script from Git repository
apiVersion: batch/v1
kind: Job
metadata:
  name: joget-db-setup
  namespace: joget
  annotations:
    argocd.argoproj.io/hook: PostSync
    argocd.argoproj.io/hook-weight: "1"
    # Remove for debugging: argocd.argoproj.io/hook-delete-policy: HookSucceeded
spec:
  template:
    spec:
      restartPolicy: OnFailure
      volumes:
      - name: secrets-store
        csi:
          driver: secrets-store.csi.k8s.io
          readOnly: true
          volumeAttributes:
            secretProviderClass: "joget-secrets"
      containers:
      - name: db-setup
        image: postgres:13-alpine
        command: ['sh', '-c']
        args:
        - |
          echo "Starting Joget database setup with Git script download..."
          
          # Install curl for downloading
          apk add --no-cache curl
          
          # Wait for PostgreSQL to be ready
          echo "Waiting for PostgreSQL to be ready..."
          until pg_isready -h postgresql -p 5432 -U joget_user; do
            echo "PostgreSQL is not ready yet, waiting..."
            sleep 5
          done
          echo "PostgreSQL is ready"
          
          # Wait for Joget to initialize
          echo "Waiting for Joget to initialize tables..."
          for i in $(seq 1 60); do
            if psql -h postgresql -U joget_user -d joget -c "SELECT 1;" 2>/dev/null; then
              echo "Database connection established"
              break
            fi
            echo "Attempt $i/60: Database not ready yet, waiting 10s..."
            sleep 10
          done
          
          sleep 30  # Give Joget time to create schema
          
          echo "Cleaning existing database content..."
          psql -h postgresql -U joget_user -d joget << 'EOF'
          SET session_replication_role = replica;
          DO $$ 
          DECLARE 
              r RECORD;
          BEGIN
              FOR r IN (SELECT tablename FROM pg_tables WHERE schemaname = 'public') 
              LOOP
                  EXECUTE 'TRUNCATE TABLE ' || quote_ident(r.tablename) || ' CASCADE';
                  RAISE NOTICE 'Truncated table: %', r.tablename;
              END LOOP;
          END $$;
          SET session_replication_role = DEFAULT;
          \echo 'Database cleanup completed'
          EOF
          
          echo "Downloading SQL script from Git repository..."
          
          # Download your actual SQL script from the Git repository
          curl -L -o /tmp/jwdb-postgres.sql \
            "https://raw.githubusercontent.com/AzizBenDhiab/aks-data-platform-gitops/main/argocd/scripts/jwdb-postgres.sql"
          
          if [ ! -f /tmp/jwdb-postgres.sql ]; then
            echo "❌ Failed to download SQL script!"
            exit 1
          fi
          
          echo "Script downloaded. Size: $(wc -l < /tmp/jwdb-postgres.sql) lines"
          echo "First 10 lines of script:"
          head -10 /tmp/jwdb-postgres.sql
          
          echo "Running SQL script..."
          psql -h postgresql -U joget_user -d joget -f /tmp/jwdb-postgres.sql
          
          echo "Verifying setup..."
          psql -h postgresql -U joget_user -d joget -c "SELECT COUNT(*) as table_count FROM information_schema.tables WHERE table_schema = 'public';"
          psql -h postgresql -U joget_user -d joget -c "SELECT COUNT(*) as user_count FROM dir_user;"
          
          echo "Joget database setup completed successfully!"
        env:
        - name: PGPASSWORD
          valueFrom:
            secretKeyRef:
              name: joget-secrets
              key: joget-password
        volumeMounts:
        - name: secrets-store
          mountPath: "/mnt/secrets-store"
          readOnly: true
      serviceAccountName: joget-workload-identity