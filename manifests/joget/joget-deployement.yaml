# Joget DX8 Configuration - Updated with Azure Key Vault Integration + CSRF Disabled
apiVersion: v1
kind: Namespace
metadata:
  name: joget
  labels:
    name: joget
---
# Persistent Volume Claim (no changes)
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: joget-dx8-tomcat9-pvc
  namespace: joget
spec:
  accessModes:
    - ReadWriteOnce
  storageClassName: managed-csi
  resources:
    requests:
      storage: 10Gi
---
# Service Account for clustering AND workload identity (renamed and updated)
apiVersion: v1
kind: ServiceAccount
metadata:
  name: joget-workload-identity  # ✅ Renamed from "joget" to follow convention
  namespace: joget
  annotations:
    azure.workload.identity/client-id: "799510cb-8722-4985-9edb-6b5e86985715" # "__AZURE_CLIENT_ID__"  # ✅ Added workload identity
  labels:
    azure.workload.identity/use: "true"  # ✅ Added workload identity label
---
# RBAC for clustering (updated to use new service account name)
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  namespace: joget
  name: joget-cluster-role
rules:
- apiGroups: [""]
  resources: ["pods", "endpoints", "services"]
  verbs: ["get", "list", "watch"]
---
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: joget-cluster-binding
  namespace: joget
subjects:
- kind: ServiceAccount
  name: joget-workload-identity  # ✅ Updated to use new service account name
  namespace: joget
roleRef:
  kind: Role
  name: joget-cluster-role
  apiGroup: rbac.authorization.k8s.io
---
# SecretProviderClass for Azure Key Vault secrets
apiVersion: secrets-store.csi.x-k8s.io/v1
kind: SecretProviderClass
metadata:
  name: joget-secrets
  namespace: joget
spec:
  provider: azure
  parameters:
    usePodIdentity: "false"
    useVMManagedIdentity: "false"
    clientID: "799510cb-8722-4985-9edb-6b5e86985715" # "__AZURE_CLIENT_ID__"
    keyvaultName: "kv-aks-data-dev-95548452" # "__AZURE_KEYVAULT_NAME__"
    cloudName: ""
    objects: |
      array:
        - |
          objectName: postgres-admin-password
          objectType: secret
          objectVersion: ""
        - |
          objectName: joget-user-password
          objectType: secret
          objectVersion: ""
        - |
          objectName: joget-admin-password
          objectType: secret
          objectVersion: ""
    tenantId: "eb554ecf-0352-4071-9a91-d464ab3bed97" # "__AZURE_TENANT_ID__"
  secretObjects:
  - secretName: joget-secrets
    type: Opaque
    data:
    - objectName: postgres-admin-password
      key: postgres-password
    - objectName: joget-user-password
      key: joget-password
    - objectName: joget-admin-password
      key: joget-admin-password
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: joget-dx8-tomcat9
  namespace: joget
  labels:
    app: joget-dx8-tomcat9
spec:
  replicas: 3
  selector:
    matchLabels:
      app: joget-dx8-tomcat9
  template:
    metadata:
      labels:
        app: joget-dx8-tomcat9
        azure.workload.identity/use: "true"  # ✅ Added for workload identity
    spec:
      serviceAccountName: joget-workload-identity  # ✅ Updated to use new service account name
      volumes:
        - name: joget-dx8-tomcat9-pv
          persistentVolumeClaim:
            claimName: joget-dx8-tomcat9-pvc
        - name: secrets-store  # ✅ Added CSI volume for secrets
          csi:
            driver: secrets-store.csi.k8s.io
            readOnly: true
            volumeAttributes:
              secretProviderClass: "joget-secrets"
      
      securityContext:
        runAsUser: 1000
        fsGroup: 0
      
      initContainers:
      # Wait for PostgreSQL - Updated to use secrets
      - name: wait-for-postgresql
        image: postgres:13-alpine
        command: ['sh', '-c']
        args:
        - |
          echo "Waiting for PostgreSQL to be ready..."
          until pg_isready -h postgresql -p 5432 -U joget_user; do
            echo "PostgreSQL is not ready yet, waiting..."
            sleep 5
          done
          echo "PostgreSQL is ready!"
        env:
        - name: PGPASSWORD
          valueFrom:
            secretKeyRef:
              name: joget-secrets  # ✅ Use secret instead of hardcoded password
              key: joget-password
        volumeMounts:  # ✅ Added volume mount for secrets
        - name: secrets-store
          mountPath: "/mnt/secrets-store"
          readOnly: true
      
      # Setup PostgreSQL configuration - Updated to use secrets + CSRF DISABLED
      - name: setup-joget-config
        image: busybox:1.36
        command: ['sh', '-c']
        args:
        - |
          echo "Setting up Joget DX8 configuration with secure passwords and CSRF disabled..."
          
          # Create directory at the OFFICIAL mount path
          mkdir -p /opt/joget/wflow
          
          # Read password from mounted secret
          JOGET_PASSWORD=$(cat /mnt/secrets-store/joget-user-password)
          
          # Create PostgreSQL configuration with secure password + SECURITY DISABLED
          cat > /opt/joget/wflow/app_datasource.properties << 'EOF'
          currentProfile=postgresql
          
          # Security bypass for setup page - CSRF disabled
          security.csrf.disabled=true
          security.header.check.disabled=true
          setup.security.disabled=true
          wflow.disable.csrf=true
          joget.setup.bypass.security=true
          joget.csrf.disabled=true
          EOF
          
          cat > /opt/joget/wflow/app_datasource-postgresql.properties << EOF
          workflowUser=joget_user
          workflowPassword=$JOGET_PASSWORD
          workflowDriver=org.postgresql.Driver
          workflowUrl=jdbc\:postgresql\://postgresql:5432/joget
          profileName=postgresql
          
          # Security bypass for setup page - CSRF disabled
          security.csrf.disabled=true
          security.header.check.disabled=true
          setup.security.disabled=true
          wflow.disable.csrf=true
          joget.setup.bypass.security=true
          joget.csrf.disabled=true
          EOF
          
          cat > /opt/joget/wflow/app_datasource-default.properties << 'EOF'
          workflowDriver=org.hsqldb.jdbcDriver
          workflowUrl=jdbc\:hsqldb\:file\:${wflow.home}/db/jwdb;shutdown\=true;hsqldb.write_delay\=false;hsqldb.log_data\=false
          workflowUser=sa
          workflowPassword=
          profileName=
          
          # Security bypass for setup page - CSRF disabled
          security.csrf.disabled=true
          security.header.check.disabled=true
          setup.security.disabled=true
          wflow.disable.csrf=true
          joget.setup.bypass.security=true
          joget.csrf.disabled=true
          EOF
          
          chmod -R 755 /opt/joget/wflow/
          
          echo "Configuration files created with secure passwords and CSRF disabled:"
          ls -la /opt/joget/wflow/
          echo "Setup complete!"
        volumeMounts:
        - name: joget-dx8-tomcat9-pv
          mountPath: /opt/joget/wflow
        - name: secrets-store  # ✅ Added volume mount for secrets
          mountPath: "/mnt/secrets-store"
          readOnly: true
      
      containers:
        - name: joget-dx8-tomcat9
          image: jogetworkflow/joget-dx8-tomcat9:latest
          ports:
            - containerPort: 8080
            - containerPort: 9080  
            - containerPort: 4000  # Clustering port
          volumeMounts:
            - name: joget-dx8-tomcat9-pv
              mountPath: /opt/joget/wflow  # OFFICIAL path from documentation
            - name: secrets-store  # ✅ Added volume mount for secrets
              mountPath: "/mnt/secrets-store"
              readOnly: true
          env:
            - name: KUBERNETES_NAMESPACE
              valueFrom:
                fieldRef:
                  fieldPath: metadata.namespace
            - name: KUBERNETES_LABELS
              value: "app=joget-dx8-tomcat9"
            # Enable clustering + SECURITY DISABLED VIA JAVA OPTS
            - name: CATALINA_OPTS
              value: "-Djoget.cluster.enabled=true -Dtomcat.clustering.enabled=true -Dsecurity.csrf.disabled=true -Dsetup.security.disabled=true -Dwflow.disable.csrf=true -Djoget.setup.bypass.security=true"
            # Additional security bypass environment variables
            - name: JOGET_CSRF_DISABLED
              value: "true"
            - name: SETUP_SECURITY_DISABLED
              value: "true"
            - name: WFLOW_DISABLE_CSRF
              value: "true"
          resources:
            limits:
              cpu: 2000m
              memory: 4Gi
            requests:
              cpu: 500m
              memory: 1Gi
---
# Headless Service for clustering (no changes needed)
apiVersion: v1
kind: Service
metadata:
  name: joget-cluster
  namespace: joget
spec:
  clusterIP: None
  ports:
  - port: 4000
    name: cluster
  selector:
    app: joget-dx8-tomcat9
---
# Main Service (no changes needed)
apiVersion: v1
kind: Service
metadata:
  name: joget-dx8-tomcat9
  namespace: joget
  labels:
    app: joget-dx8-tomcat9
spec:
  ports:
  - name: http
    port: 80
    targetPort: 8080
  - name: https
    port: 443
    targetPort: 9080
  selector:
    app: joget-dx8-tomcat9
  type: ClusterIP