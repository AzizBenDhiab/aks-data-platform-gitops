# Namespace
apiVersion: v1
kind: Namespace
metadata:
  name: joget
  labels:
    name: joget
---
# Persistent Volume Claim for Joget data
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: joget-data-pvc
  namespace: joget
spec:
  accessModes:
    - ReadWriteOnce
  storageClassName: managed-csi
  resources:
    requests:
      storage: 10Gi
---
# ConfigMap for Joget configuration
apiVersion: v1
kind: ConfigMap
metadata:
  name: joget-config
  namespace: joget
data:
  # PostgreSQL database configuration - connects to existing Bitnami PostgreSQL
  DATASOURCE_DRIVER: "org.postgresql.Driver"
  DATASOURCE_URL: "jdbc:postgresql://postgresql:5432/joget?useUnicode=true&characterEncoding=UTF-8&useSSL=false"
  DATASOURCE_USERNAME: "joget_user"
  # Add other environment variables as needed
  JAVA_OPTS: "-Xmx2048m -Xms512m -XX:MaxMetaspaceSize=512m"
---
# Secret for database password
apiVersion: v1
kind: Secret
metadata:
  name: joget-secrets
  namespace: joget
type: Opaque
data:
  # Base64 encoded password - matches your PostgreSQL values
  DATASOURCE_PASSWORD: am9nZXRfcGFzc3dvcmQ=  # 'joget_password' encoded
---
# Service Account
apiVersion: v1
kind: ServiceAccount
metadata:
  name: joget
  namespace: joget
---
# Deployment
apiVersion: apps/v1
kind: Deployment
metadata:
  name: joget
  namespace: joget
  labels:
    app: joget
spec:
  replicas: 1
  selector:
    matchLabels:
      app: joget
  template:
    metadata:
      labels:
        app: joget
      annotations:
        prometheus.io/scrape: "true"
        prometheus.io/port: "8080"
        prometheus.io/path: "/jw"
    spec:
      serviceAccountName: joget
      securityContext:
        runAsUser: 1000
        runAsGroup: 1000
        fsGroup: 1000
      initContainers:
      # Wait for PostgreSQL to be ready
      - name: wait-for-postgresql
        image: postgres:13-alpine
        command: ['sh', '-c']
        args:
        - |
          echo "Waiting for PostgreSQL to be ready..."
          until pg_isready -h postgresql -p 5432 -U joget_user; do
            echo "PostgreSQL is not ready yet, waiting..."
            sleep 5
          done
          echo "PostgreSQL is ready!"
        env:
        - name: PGPASSWORD
          value: "joget_password"
        securityContext:
          runAsUser: 1000
          runAsGroup: 1000
      
      # Setup Joget configuration without root privileges
      - name: setup-joget-config
        image: busybox:1.36
        command: ['sh', '-c']
        args:
        - |
          echo "Setting up Joget configuration with non-root permissions..."
          
          # Create the persistent directory where files will actually be stored
          mkdir -p /opt/joget/wflow
          
          # Create app_datasource.properties - points to postgresql profile
          cat > /opt/joget/wflow/app_datasource.properties << 'EOF'
          currentProfile=postgresql
          EOF
          
          # Create app_datasource-postgresql.properties - PostgreSQL connection details
          cat > /opt/joget/wflow/app_datasource-postgresql.properties << 'EOF'
          workflowUser=joget_user
          workflowPassword=joget_password
          workflowDriver=org.postgresql.Driver
          workflowUrl=jdbc\:postgresql\://postgresql:5432/joget
          EOF
          
          # Create app_datasource-default.properties - Required by Joget startup script
          cat > /opt/joget/wflow/app_datasource-default.properties << 'EOF'
          workflowDriver=org.hsqldb.jdbcDriver
          workflowUrl=jdbc\:hsqldb\:file\:${wflow.home}/db/jwdb;shutdown\=true;hsqldb.write_delay\=false;hsqldb.log_data\=false
          workflowUser=sa
          workflowPassword=
          profileName=
          EOF
          
          # Create directory structure in shared volume (should work with fsGroup)
          mkdir -p /shared-home/tomcat/wflow
          
          # Copy files to shared location where both containers can access
          cp /opt/joget/wflow/app_datasource.properties /shared-home/tomcat/wflow/
          cp /opt/joget/wflow/app_datasource-postgresql.properties /shared-home/tomcat/wflow/
          cp /opt/joget/wflow/app_datasource-default.properties /shared-home/tomcat/wflow/
          
          # Set permissions (should work due to fsGroup: 1000)
          chmod -R 755 /shared-home/tomcat/
          
          echo "Configuration files created successfully:"
          echo "=== Persistent location (/opt/joget/wflow) ==="
          ls -la /opt/joget/wflow/
          echo "=== Shared location (/shared-home/tomcat/wflow) ==="
          ls -la /shared-home/tomcat/wflow/
          echo "Setup complete!"
        securityContext:
          runAsUser: 1000
          runAsGroup: 1000
        volumeMounts:
        - name: joget-data
          mountPath: /opt/joget/wflow
        - name: shared-home
          mountPath: /shared-home
      containers:
      - name: joget
        image: jogetworkflow/joget-community:latest
        imagePullPolicy: IfNotPresent
        securityContext:
          runAsUser: 1000
          runAsGroup: 1000
          runAsNonRoot: true
          allowPrivilegeEscalation: false
          readOnlyRootFilesystem: false
        ports:
        - containerPort: 8080
          name: http
          protocol: TCP
        - containerPort: 9080
          name: https
          protocol: TCP
        env:
        # Java options and disable clustering
        - name: JAVA_OPTS
          value: "-Xmx2048m -Xms512m -XX:MaxMetaspaceSize=512m"
        - name: CATALINA_OPTS
          value: "-Dtomcat.clustering.enabled=false"
        # Point to shared location where config files are
        - name: WFLOW_HOME
          value: "/home/tomcat/wflow"
        volumeMounts:
        - name: joget-data
          mountPath: /opt/joget/wflow
        - name: shared-home
          mountPath: /home/tomcat
        resources:
          limits:
            cpu: 2000m
            memory: 4Gi
          requests:
            cpu: 500m
            memory: 1Gi
        # Health checks with appropriate timing
        livenessProbe:
          httpGet:
            path: /jw
            port: 8080
          initialDelaySeconds: 300
          periodSeconds: 30
          timeoutSeconds: 10
          failureThreshold: 5
        readinessProbe:
          httpGet:
            path: /jw
            port: 8080
          initialDelaySeconds: 240
          periodSeconds: 10
          timeoutSeconds: 5
          failureThreshold: 10
        startupProbe:
          httpGet:
            path: /jw
            port: 8080
          initialDelaySeconds: 60
          periodSeconds: 15
          timeoutSeconds: 10
          failureThreshold: 30
      volumes:
      - name: joget-data
        persistentVolumeClaim:
          claimName: joget-data-pvc
      - name: shared-home
        emptyDir: {}  # Shared volume between initContainer and main container
      restartPolicy: Always
---
# Service
apiVersion: v1
kind: Service
metadata:
  name: joget-service
  namespace: joget
  labels:
    app: joget
spec:
  type: ClusterIP
  ports:
  - port: 8080
    targetPort: 8080
    protocol: TCP
    name: http
  - port: 9080
    targetPort: 9080
    protocol: TCP
    name: https
  selector:
    app: joget
---
# Production-ready Ingress configuration
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: joget-ingress
  namespace: joget
  annotations:
    kubernetes.io/ingress.class: nginx
    nginx.ingress.kubernetes.io/rewrite-target: /
    nginx.ingress.kubernetes.io/proxy-body-size: "100m"
    nginx.ingress.kubernetes.io/proxy-read-timeout: "300"
    nginx.ingress.kubernetes.io/proxy-send-timeout: "300"
    nginx.ingress.kubernetes.io/proxy-connect-timeout: "300"
    # Session affinity for better user experience with Joget
    nginx.ingress.kubernetes.io/affinity: "cookie"
    nginx.ingress.kubernetes.io/session-cookie-name: "joget-server"
    nginx.ingress.kubernetes.io/session-cookie-expires: "86400"
    nginx.ingress.kubernetes.io/session-cookie-max-age: "86400"
    # Security headers
    nginx.ingress.kubernetes.io/server-snippet: |
      add_header X-Frame-Options "SAMEORIGIN" always;
      add_header X-Content-Type-Options "nosniff" always;
      add_header X-XSS-Protection "1; mode=block" always;
spec:
  rules:
  # Replace YOUR-EXTERNAL-IP with actual nginx ingress IP for nip.io testing
  - host: joget.YOUR-EXTERNAL-IP.nip.io
    http:
      paths:
      - path: /
        pathType: Prefix
        backend:
          service:
            name: joget-service
            port:
              number: 8080
  # Uncomment when you have TLS certificate
  # tls:
  # - hosts:
  #   - joget.your-domain.com
  #   secretName: joget-tls