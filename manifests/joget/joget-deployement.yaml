# Namespace
apiVersion: v1
kind: Namespace
metadata:
  name: joget
  labels:
    name: joget
---
# Persistent Volume Claim for Joget data
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: joget-data-pvc
  namespace: joget
spec:
  accessModes:
    - ReadWriteOnce
  storageClassName: managed-csi
  resources:
    requests:
      storage: 10Gi
---
# ConfigMap for Joget configuration
apiVersion: v1
kind: ConfigMap
metadata:
  name: joget-config
  namespace: joget
data:
  # PostgreSQL database configuration - connects to existing Bitnami PostgreSQL
  DATASOURCE_DRIVER: "org.postgresql.Driver"
  DATASOURCE_URL: "jdbc:postgresql://postgresql:5432/joget?useUnicode=true&characterEncoding=UTF-8&useSSL=false"
  DATASOURCE_USERNAME: "joget_user"
  # Add other environment variables as needed
  JAVA_OPTS: "-Xmx2048m -Xms512m -XX:MaxMetaspaceSize=512m"
---
# Secret for database password
apiVersion: v1
kind: Secret
metadata:
  name: joget-secrets
  namespace: joget
type: Opaque
data:
  # Base64 encoded password - matches your PostgreSQL values
  DATASOURCE_PASSWORD: am9nZXRfcGFzc3dvcmQ=  # 'joget_password' encoded
---
# Service Account
apiVersion: v1
kind: ServiceAccount
metadata:
  name: joget
  namespace: joget
---
# Deployment
apiVersion: apps/v1
kind: Deployment
metadata:
  name: joget
  namespace: joget
  labels:
    app: joget
spec:
  replicas: 1
  selector:
    matchLabels:
      app: joget
  template:
    metadata:
      labels:
        app: joget
      annotations:
        prometheus.io/scrape: "true"
        prometheus.io/port: "8080"
        prometheus.io/path: "/jw"
    spec:
      serviceAccountName: joget
      securityContext:
        runAsUser: 1000
        runAsGroup: 1000
        fsGroup: 1000
       initContainers:
      # Wait for PostgreSQL to be ready
      - name: wait-for-postgresql
        image: postgres:13-alpine
        command: ['sh', '-c']
        args:
        - |
          echo "Waiting for PostgreSQL to be ready..."
          until pg_isready -h postgresql -p 5432 -U joget_user; do
            echo "PostgreSQL is not ready yet, waiting..."
            sleep 5
          done
          echo "PostgreSQL is ready!"
        env:
        - name: PGPASSWORD
          value: "joget_password" # Ensure this matches your secret or use a secretKeyRef
        securityContext:
          runAsUser: 1000
          runAsGroup: 1000
      # NEW INIT CONTAINER: Initialize Joget Database Schema
      - name: init-joget-db
        image: jogetworkflow/joget-community:latest # Use the same Joget image
        command: ["/bin/sh", "-c"]
        args:
        - |
          echo "Initializing Joget database schema..."
          # The 'setup' Ant target in Joget images typically initializes the DB
          # Ensure WFLOW_HOME points to a writeable location where it can create config files temporarily
          export WFLOW_HOME=/tmp/joget-init-wflow
          mkdir -p $WFLOW_HOME
          # Write the datasource properties directly into WFLOW_HOME for setup command
          cat > $WFLOW_HOME/app_datasource.properties << EOF
          currentProfile=postgresql
          EOF
          cat > $WFLOW_HOME/app_datasource-postgresql.properties << EOF
          workflowUser=joget_user
          workflowPassword=$(echo "joget_password" | base64 -d) # Decode from base64 if needed, or use plain if not sourced from secret
          workflowDriver=org.postgresql.Driver
          workflowUrl=jdbc\:postgresql\://postgresql:5432/joget
          EOF
          # Run the Ant setup command. The 'setup' target usually handles schema creation.
          /opt/joget/apache-tomcat/bin/startup.sh setup
          echo "Joget database schema initialization attempted."
        env:
        - name: DATASOURCE_PASSWORD
          valueFrom:
            secretKeyRef:
              name: joget-secrets
              key: DATASOURCE_PASSWORD
        - name: DATASOURCE_USERNAME
          valueFrom:
            configMapKeyRef:
              name: joget-config
              key: DATASOURCE_USERNAME
        - name: DATASOURCE_URL
          valueFrom:
            configMapKeyRef:
              name: joget-config
              key: DATASOURCE_URL
        - name: DATASOURCE_DRIVER
          valueFrom:
            configMapKeyRef:
              name: joget-config
              key: DATASOURCE_DRIVER
        securityContext:
          runAsUser: 0 # The setup script might require root temporarily, or ensure the image's setup script can run as non-root
          runAsGroup: 0
        volumeMounts:
        # Mount an emptyDir for temporary setup files, as the setup command might write there
        - name: joget-init-tmp
          mountPath: /tmp/joget-init-wflow
      # Existing setup-joget-config init container (slightly modified to use correct paths)
      - name: setup-joget-config
        image: busybox:1.36
        command: ['sh', '-c']
        args:
        - |
          echo "Setting up Joget configuration with corrected directory structure..."
          # No need to create /opt/joget/wflow directly in this container if it's a mounted PVC.
          # The main joget container expects /home/tomcat/wflow based on WFLOW_HOME env var.
          # The PVC for joget-data should be mounted at /home/tomcat/wflow for persistent data.
          # The shared-home emptyDir can be mounted at /home/tomcat for general Joget application files.

          # Ensure the persistent directory exists and is writable by the expected user
          mkdir -p /home/tomcat/wflow
          # Copy files to shared location where both containers can access (main Joget container expects this)
          cat > /home/tomcat/wflow/app_datasource.properties << 'EOF'
          currentProfile=postgresql
          EOF
          cat > /home/tomcat/wflow/app_datasource-postgresql.properties << 'EOF'
          workflowUser=joget_user
          workflowPassword=joget_password
          workflowDriver=org.postgresql.Driver
          workflowUrl=jdbc\:postgresql\://postgresql:5432/joget
          EOF
          cat > /home/tomcat/wflow/app_datasource-default.properties << 'EOF'
          workflowDriver=org.hsqldb.jdbcDriver
          workflowUrl=jdbc\:hsqldb\:file\:${wflow.home}/db/jwdb;shutdown\=true;hsqldb.write_delay\=false;hsqldb.log_data\=false
          workflowUser=sa
          workflowPassword=
          profileName=
          EOF
          # Set permissions (should work due to fsGroup: 1000)
          chmod -R 755 /home/tomcat/wflow/

          echo "Configuration files created successfully in /home/tomcat/wflow"
          ls -la /home/tomcat/wflow/
          echo "Setup complete!"
        securityContext:
          runAsUser: 1000
          runAsGroup: 1000
        volumeMounts:
        # The main Joget container's WFLOW_HOME is /home/tomcat/wflow, so mount PVC there directly
        - name: joget-data
          mountPath: /home/tomcat/wflow # Mount PVC here directly for WFLOW_HOME
      containers:
      - name: joget
        image: jogetworkflow/joget-community:latest
        imagePullPolicy: IfNotPresent
        securityContext:
          runAsUser: 1000
          runAsGroup: 1000
          runAsNonRoot: true
          allowPrivilegeEscalation: false
          readOnlyRootFilesystem: false
        ports:
        - containerPort: 8080
          name: http
          protocol: TCP
        - containerPort: 9080
          name: https
          protocol: TCP
        env:
        # Java options and disable clustering
        - name: JAVA_OPTS
          value: "-Xmx2048m -Xms512m -XX:MaxMetaspaceSize=512m"
        - name: CATALINA_OPTS
          value: "-Dtomcat.clustering.enabled=false"
        # Point to shared location where config files and persistent data are
        - name: WFLOW_HOME
          value: "/home/tomcat/wflow" # This is where Joget expects its data and config
        volumeMounts:
        - name: joget-data
          mountPath: /home/tomcat/wflow # Main container also uses this path for data and config
        resources:
          limits:
            cpu: 2000m
            memory: 4Gi
          requests:
            cpu: 500m
            memory: 1Gi
        # Health checks with appropriate timing
        livenessProbe:
          httpGet:
            path: /jw
            port: 8080
          initialDelaySeconds: 300
          periodSeconds: 30
          timeoutSeconds: 10
          failureThreshold: 5
        readinessProbe:
          httpGet:
            path: /jw
            port: 8080
          initialDelaySeconds: 240
          periodSeconds: 10
          timeoutSeconds: 5
          failureThreshold: 10
        startupProbe:
          httpGet:
            path: /jw
            port: 8080
          initialDelaySeconds: 60
          periodSeconds: 15
          timeoutSeconds: 10
          failureThreshold: 30
      volumes:
      - name: joget-data
        persistentVolumeClaim:
          claimName: joget-data-pvc
      - name: joget-init-tmp # New temporary volume for init-joget-db
        emptyDir: {}
      restartPolicy: Always
---
# Service
apiVersion: v1
kind: Service
metadata:
  name: joget-service
  namespace: joget
  labels:
    app: joget
spec:
  type: ClusterIP
  ports:
  - port: 8080
    targetPort: 8080
    protocol: TCP
    name: http
  - port: 9080
    targetPort: 9080
    protocol: TCP
    name: https
  selector:
    app: joget
---
# # Production-ready Ingress configuration
# apiVersion: networking.k8s.io/v1
# kind: Ingress
# metadata:
#   name: joget-ingress
#   namespace: joget
#   annotations:
#     kubernetes.io/ingress.class: nginx
#     nginx.ingress.kubernetes.io/rewrite-target: /
#     nginx.ingress.kubernetes.io/proxy-body-size: "100m"
#     nginx.ingress.kubernetes.io/proxy-read-timeout: "300"
#     nginx.ingress.kubernetes.io/proxy-send-timeout: "300"
#     nginx.ingress.kubernetes.io/proxy-connect-timeout: "300"
#     # Session affinity for better user experience with Joget
#     nginx.ingress.kubernetes.io/affinity: "cookie"
#     nginx.ingress.kubernetes.io/session-cookie-name: "joget-server"
#     nginx.ingress.kubernetes.io/session-cookie-expires: "86400"
#     nginx.ingress.kubernetes.io/session-cookie-max-age: "86400"
#     # Security headers
#     nginx.ingress.kubernetes.io/server-snippet: |
#       add_header X-Frame-Options "SAMEORIGIN" always;
#       add_header X-Content-Type-Options "nosniff" always;
#       add_header X-XSS-Protection "1; mode=block" always;
# spec:
#   rules:
#   # Replace YOUR-EXTERNAL-IP with actual nginx ingress IP for nip.io testing
#   - host: joget.YOUR-EXTERNAL-IP.nip.io
#     http:
#       paths:
#       - path: /
#         pathType: Prefix
#         backend:
#           service:
#             name: joget-service
#             port:
#               number: 8080
#   # Uncomment when you have TLS certificate
#   # tls:
#   # - hosts:
#   #   - joget.your-domain.com
#   #   secretName: joget-tls