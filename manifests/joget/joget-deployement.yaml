# Namespace
apiVersion: v1
kind: Namespace
metadata:
  name: joget
  labels:
    name: joget
---
# Persistent Volume Claim for Joget data
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: joget-data-pvc
  namespace: joget
spec:
  accessModes:
    - ReadWriteOnce
  storageClassName: managed-csi
  resources:
    requests:
      storage: 10Gi
---
# ConfigMap for Joget configuration
apiVersion: v1
kind: ConfigMap
metadata:
  name: joget-config
  namespace: joget
data:
  # PostgreSQL database configuration - connects to existing Bitnami PostgreSQL
  DATASOURCE_DRIVER: "org.postgresql.Driver"
  DATASOURCE_URL: "jdbc:postgresql://postgresql:5432/joget?useUnicode=true&characterEncoding=UTF-8&useSSL=false"
  DATASOURCE_USERNAME: "joget_user"
  # Add other environment variables as needed
  JAVA_OPTS: "-Xmx2048m -Xms512m -XX:MaxMetaspaceSize=512m"
---
# Secret for database password
apiVersion: v1
kind: Secret
metadata:
  name: joget-secrets
  namespace: joget
type: Opaque
data:
  # Base64 encoded password - matches your PostgreSQL values
  DATASOURCE_PASSWORD: am9nZXRfcGFzc3dvcmQ= # 'joget_password' encoded
---
# Service Account
apiVersion: v1
kind: ServiceAccount
metadata:
  name: joget
  namespace: joget
---
# Deployment
apiVersion: apps/v1
kind: Deployment
metadata:
  name: joget
  namespace: joget
  labels:
    app: joget
spec:
  replicas: 1
  selector:
    matchLabels:
      app: joget
  template:
    metadata:
      labels:
        app: joget
      annotations:
        prometheus.io/scrape: "true"
        prometheus.io/port: "8080"
        prometheus.io/path: "/jw"
    spec:
      serviceAccountName: joget
      securityContext:
        fsGroup: 1000
      initContainers:
        - name: fix-permissions
          image: busybox:1.36
          command: ["sh", "-c"]
          args:
            - |
              echo "Fixing Joget webapps permissions..."
              chown -R 1000:1000 /opt/joget/wflow || true
              echo "Permissions fixed"
          securityContext:
            runAsUser: 0
          volumeMounts:
            - name: joget-data
              mountPath: /opt/joget/wflow
      containers:
        - name: joget
          image: jogetworkflow/joget-dx8-tomcat9:latest
          imagePullPolicy: IfNotPresent
          securityContext:
            runAsUser: 1000
            runAsGroup: 1000
            runAsNonRoot: true
            allowPrivilegeEscalation: false
            readOnlyRootFilesystem: false
            capabilities:
              drop:
                - ALL
          ports:
            - containerPort: 8080
              name: http
              protocol: TCP
            - containerPort: 9080
              name: https
              protocol: TCP
          env:
            - name: DATASOURCE_DRIVER
              valueFrom:
                configMapKeyRef:
                  name: joget-config
                  key: DATASOURCE_DRIVER
            - name: DATASOURCE_URL
              valueFrom:
                configMapKeyRef:
                  name: joget-config
                  key: DATASOURCE_URL
            - name: DATASOURCE_USERNAME
              valueFrom:
                configMapKeyRef:
                  name: joget-config
                  key: DATASOURCE_USERNAME
            - name: DATASOURCE_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: joget-secrets
                  key: DATASOURCE_PASSWORD
            - name: JAVA_OPTS
              valueFrom:
                configMapKeyRef:
                  name: joget-config
                  key: JAVA_OPTS
            # Disable Tomcat clustering to reduce 403 errors
            - name: CATALINA_OPTS
              value: "-Dtomcat.clustering.enabled=false"
          volumeMounts:
            - name: joget-data
              mountPath: /opt/joget/wflow
          resources:
            limits:
              cpu: 2000m
              memory: 4Gi
            requests:
              cpu: 500m
              memory: 1Gi
          # Temporarily comment out health checks for debugging
          # livenessProbe:
          #   httpGet:
          #     path: /jw
          #     port: 8080
          #   initialDelaySeconds: 120
          #   periodSeconds: 30
          #   timeoutSeconds: 10
          #   failureThreshold: 3
          # readinessProbe:
          #   httpGet:
          #     path: /jw
          #     port: 8080
          #   initialDelaySeconds: 60
          #   periodSeconds: 10
          #   timeoutSeconds: 5
          #   failureThreshold: 3
          # startupProbe:
          #   httpGet:
          #     path: /jw
          #     port: 8080
          #   initialDelaySeconds: 30
          #   periodSeconds: 10
          #   timeoutSeconds: 5
          #   failureThreshold: 30
      volumes:
        - name: joget-data
          persistentVolumeClaim:
            claimName: joget-data-pvc
      restartPolicy: Always
---
# Service
apiVersion: v1
kind: Service
metadata:
  name: joget-service
  namespace: joget
  labels:
    app: joget
spec:
  type: ClusterIP
  ports:
    - port: 8080
      targetPort: 8080
      protocol: TCP
      name: http
    - port: 9080
      targetPort: 9080
      protocol: TCP
      name: https
  selector:
    app: joget
---
# Ingress (optional - uncomment and configure as needed)
# apiVersion: networking.k8s.io/v1
# kind: Ingress
# metadata:
#   name: joget-ingress
#   namespace: joget
#   annotations:
#     kubernetes.io/ingress.class: nginx
#     nginx.ingress.kubernetes.io/rewrite-target: /
#     nginx.ingress.kubernetes.io/proxy-body-size: "100m"
#     nginx.ingress.kubernetes.io/proxy-read-timeout: "300"
#     nginx.ingress.kubernetes.io/proxy-send-timeout: "300"
# spec:
#   rules:
#   - host: joget.your-domain.com
#     http:
#       paths:
#       - path: /
#         pathType: Prefix
#         backend:
#           service:
#             name: joget-service
#             port:
#               number: 8080
#   # tls:
#   # - hosts:
#   #   - joget.your-domain.com
#   #   secretName: joget-tls
