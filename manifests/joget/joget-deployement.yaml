# Joget DX8 Configuration - Fixed with Official Paths + PostgreSQL
apiVersion: v1
kind: Namespace
metadata:
  name: joget
  labels:
    name: joget
---
# Persistent Volume Claim (using Azure managed-csi like yours)
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: joget-dx8-tomcat9-pvc
  namespace: joget
spec:
  accessModes:
    - ReadWriteOnce
  storageClassName: managed-csi
  resources:
    requests:
      storage: 10Gi
---
# Service Account for clustering
apiVersion: v1
kind: ServiceAccount
metadata:
  name: joget
  namespace: joget
---
# RBAC for clustering
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  namespace: joget
  name: joget-cluster-role
rules:
- apiGroups: [""]
  resources: ["pods", "endpoints", "services"]
  verbs: ["get", "list", "watch"]
---
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: joget-cluster-binding
  namespace: joget
subjects:
- kind: ServiceAccount
  name: joget
  namespace: joget
roleRef:
  kind: Role
  name: joget-cluster-role
  apiGroup: rbac.authorization.k8s.io
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: joget-dx8-tomcat9
  namespace: joget
  labels:
    app: joget-dx8-tomcat9
spec:
  replicas: 1
  selector:
    matchLabels:
      app: joget-dx8-tomcat9
  template:
    metadata:
      labels:
        app: joget-dx8-tomcat9
    spec:
      serviceAccountName: joget
      volumes:
        - name: joget-dx8-tomcat9-pv
          persistentVolumeClaim:
            claimName: joget-dx8-tomcat9-pvc  # Fixed: matches PVC name
      securityContext:
        runAsUser: 1000
        fsGroup: 0  # Match official documentation
      initContainers:
      # Wait for PostgreSQL
      - name: wait-for-postgresql
        image: postgres:13-alpine
        command: ['sh', '-c']
        args:
        - |
          echo "Waiting for PostgreSQL to be ready..."
          until pg_isready -h postgresql -p 5432 -U joget_user; do
            echo "PostgreSQL is not ready yet, waiting..."
            sleep 5
          done
          echo "PostgreSQL is ready!"
        env:
        - name: PGPASSWORD
          value: "joget_password"
      
      # Setup PostgreSQL configuration in the OFFICIAL path
      - name: setup-joget-config
        image: busybox:1.36
        command: ['sh', '-c']
        args:
        - |
          echo "Setting up Joget DX8 configuration in OFFICIAL path..."
          
          # Create directory at the OFFICIAL mount path
          mkdir -p /opt/joget/wflow
          
          # Create PostgreSQL configuration
          cat > /opt/joget/wflow/app_datasource.properties << 'EOF'
          currentProfile=postgresql
          EOF
          
          cat > /opt/joget/wflow/app_datasource-postgresql.properties << 'EOF'
          workflowUser=joget_user
          workflowPassword=joget_password
          workflowDriver=org.postgresql.Driver
          workflowUrl=jdbc\:postgresql\://postgresql:5432/joget
          profileName=postgresql
          EOF
          
          cat > /opt/joget/wflow/app_datasource-default.properties << 'EOF'
          workflowDriver=org.hsqldb.jdbcDriver
          workflowUrl=jdbc\:hsqldb\:file\:${wflow.home}/db/jwdb;shutdown\=true;hsqldb.write_delay\=false;hsqldb.log_data\=false
          workflowUser=sa
          workflowPassword=
          profileName=
          EOF
          
          chmod -R 755 /opt/joget/wflow/
          
          echo "Configuration files created at OFFICIAL path:"
          ls -la /opt/joget/wflow/
          echo "Setup complete!"
        volumeMounts:
        - name: joget-dx8-tomcat9-pv
          mountPath: /opt/joget/wflow
      
      containers:
        - name: joget-dx8-tomcat9
          image: jogetworkflow/joget-dx8-tomcat9:latest
          ports:
            - containerPort: 8080
            - containerPort: 9080  
            - containerPort: 4000  # Clustering port
          volumeMounts:
            - name: joget-dx8-tomcat9-pv
              mountPath: /opt/joget/wflow  # OFFICIAL path from documentation
          env:
            - name: KUBERNETES_NAMESPACE
              valueFrom:
                fieldRef:
                  fieldPath: metadata.namespace
            - name: KUBERNETES_LABELS
              value: "app=joget-dx8-tomcat9"
            # Enable clustering
            - name: CATALINA_OPTS
              value: "-Djoget.cluster.enabled=true -Dtomcat.clustering.enabled=true"
          resources:
            limits:
              cpu: 2000m
              memory: 4Gi
            requests:
              cpu: 500m
              memory: 1Gi
---
# Headless Service for clustering
apiVersion: v1
kind: Service
metadata:
  name: joget-cluster
  namespace: joget
spec:
  clusterIP: None
  ports:
  - port: 4000
    name: cluster
  selector:
    app: joget-dx8-tomcat9
---
# Main Service (LoadBalancer for external access)
apiVersion: v1
kind: Service
metadata:
  name: joget-dx8-tomcat9
  namespace: joget
  labels:
    app: joget-dx8-tomcat9
spec:
  ports:
  - name: http
    port: 80
    targetPort: 8080
  - name: https
    port: 443
    targetPort: 9080
  selector:
    app: joget-dx8-tomcat9
  type: LoadBalancer