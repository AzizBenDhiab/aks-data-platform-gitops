# .github/workflows/deploy-aks.yml
name: Deploy AKS with ArgoCD
on:
  pull_request:
    branches: [ main ]
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy'
        required: true
        default: 'dev'
        type: choice
        options:
        - dev
        - staging
        - prod
      destroy:
        description: 'Destroy infrastructure'
        required: false
        default: false
        type: boolean

env:
  ARM_CLIENT_ID: ${{ secrets.AZURE_CLIENT_ID }}
  ARM_CLIENT_SECRET: ${{ secrets.AZURE_CLIENT_SECRET }}
  ARM_SUBSCRIPTION_ID: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
  ARM_TENANT_ID: ${{ secrets.AZURE_TENANT_ID }}
  TF_VAR_environment: ${{ github.event.inputs.environment || 'dev' }}

jobs:
  terraform-plan:
    name: 'Terraform Plan'
    runs-on: ubuntu-latest
    environment: ${{ github.event.inputs.environment || 'dev' }}
    
    outputs:
      tfplanExitCode: ${{ steps.tf-plan.outputs.exitcode }}
      
    steps:
    - name: Checkout
      uses: actions/checkout@v4

    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v3
      with:
        terraform_version: 1.5.0
        terraform_wrapper: false

    - name: Azure Login
      uses: azure/login@v1
      with:
        creds: ${{ secrets.AZURE_CREDENTIALS }}

    - name: Terraform Init
      working-directory: ./terraform
      run: |
        terraform init \
          -backend-config="resource_group_name=${{ secrets.TF_STATE_RG }}" \
          -backend-config="storage_account_name=${{ secrets.TF_STATE_SA }}" \
          -backend-config="container_name=tfstate" \
          -backend-config="key=${{ env.TF_VAR_environment }}.terraform.tfstate"

    - name: Terraform Validate
      working-directory: ./terraform
      run: terraform validate

    - name: Terraform Plan
      id: tf-plan
      working-directory: ./terraform
      run: |
        export exitcode=0
        terraform plan -detailed-exitcode -no-color -out tfplan || export exitcode=$?
        
        echo "exitcode=$exitcode" >> $GITHUB_OUTPUT
        
        if [ $exitcode -eq 1 ]; then
          echo Terraform Plan Failed!
          exit 1
        else 
          exit 0
        fi

    - name: Publish Terraform Plan
      uses: actions/upload-artifact@v3
      with:
        name: tfplan-${{ env.TF_VAR_environment }}
        path: ./terraform/tfplan

  terraform-apply:
    name: 'Terraform Apply'
    if: github.ref == 'refs/heads/main' && needs.terraform-plan.outputs.tfplanExitCode == 2
    runs-on: ubuntu-latest
    environment: ${{ github.event.inputs.environment || 'dev' }}
    needs: [terraform-plan]
    
    outputs:
      cluster_name: ${{ steps.tf-output.outputs.cluster_name }}
      resource_group: ${{ steps.tf-output.outputs.resource_group }}
      
    steps:
    - name: Checkout
      uses: actions/checkout@v4

    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v3
      with:
        terraform_version: 1.5.0
        terraform_wrapper: false

    - name: Azure Login
      uses: azure/login@v1
      with:
        creds: ${{ secrets.AZURE_CREDENTIALS }}

    - name: Terraform Init
      working-directory: ./terraform
      run: |
        terraform init \
          -backend-config="resource_group_name=${{ secrets.TF_STATE_RG }}" \
          -backend-config="storage_account_name=${{ secrets.TF_STATE_SA }}" \
          -backend-config="container_name=tfstate" \
          -backend-config="key=${{ env.TF_VAR_environment }}.terraform.tfstate"

    - name: Download Terraform Plan
      uses: actions/download-artifact@v3
      with:
        name: tfplan-${{ env.TF_VAR_environment }}
        path: ./terraform

    - name: Terraform Apply
      working-directory: ./terraform
      run: terraform apply -auto-approve tfplan

    - name: Get Terraform Outputs
      id: tf-output
      working-directory: ./terraform
      run: |
        echo "cluster_name=$(terraform output -raw cluster_name)" >> $GITHUB_OUTPUT
        echo "resource_group=$(terraform output -raw resource_group_name)" >> $GITHUB_OUTPUT

  setup-argocd:
    name: 'Setup ArgoCD'
    runs-on: ubuntu-latest
    needs: [terraform-apply]
    if: success()
    
    steps:
    - name: Checkout
      uses: actions/checkout@v4

    - name: Azure Login
      uses: azure/login@v1
      with:
        creds: ${{ secrets.AZURE_CREDENTIALS }}

    - name: Get AKS Credentials
      run: |
        az aks get-credentials \
          --resource-group ${{ needs.terraform-apply.outputs.resource_group }} \
          --name ${{ needs.terraform-apply.outputs.cluster_name }} \
          --overwrite-existing

    - name: Install ArgoCD
      run: |
        # Create ArgoCD namespace
        kubectl create namespace argocd --dry-run=client -o yaml | kubectl apply -f -
        
        # Install ArgoCD
        kubectl apply -n argocd -f https://raw.githubusercontent.com/argoproj/argo-cd/stable/manifests/install.yaml
        
        # Wait for ArgoCD to be ready
        kubectl wait --for=condition=available --timeout=300s deployment/argocd-server -n argocd

    - name: Configure ArgoCD
      run: |
        # Get ArgoCD admin password
        ARGOCD_PASSWORD=$(kubectl -n argocd get secret argocd-initial-admin-secret -o jsonpath="{.data.password}" | base64 -d)
        echo "ARGOCD_PASSWORD=$ARGOCD_PASSWORD" >> $GITHUB_ENV
        
        # Create ArgoCD service LoadBalancer
        kubectl patch svc argocd-server -n argocd -p '{"spec": {"type": "LoadBalancer"}}'
        
        # Wait for external IP
        kubectl wait --for=jsonpath='{.status.loadBalancer.ingress}' service/argocd-server -n argocd --timeout=300s

    - name: Deploy Applications via ArgoCD
      run: |
        # Get ArgoCD server external IP
        ARGOCD_SERVER=$(kubectl get svc argocd-server -n argocd -o jsonpath='{.status.loadBalancer.ingress[0].ip}')
        
        # Install ArgoCD CLI
        curl -sSL -o argocd https://github.com/argoproj/argo-cd/releases/latest/download/argocd-linux-amd64
        chmod +x argocd
        sudo mv argocd /usr/local/bin/
        
        # Login to ArgoCD
        argocd login $ARGOCD_SERVER --username admin --password $ARGOCD_PASSWORD --insecure
        
        # Create application
        argocd app create joget-app \
          --repo https://github.com/${{ github.repository }} \
          --path k8s/environments/${{ env.TF_VAR_environment }} \
          --dest-server https://kubernetes.default.svc \
          --dest-namespace joget \
          --sync-policy automated \
          --auto-prune \
          --self-heal
        
        # Sync application
        argocd app sync joget-app

  terraform-destroy:
    name: 'Terraform Destroy'
    if: github.event.inputs.destroy == 'true'
    runs-on: ubuntu-latest
    environment: ${{ github.event.inputs.environment || 'dev' }}
    
    steps:
    - name: Checkout
      uses: actions/checkout@v4

    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v3
      with:
        terraform_version: 1.5.0

    - name: Azure Login
      uses: azure/login@v1
      with:
        creds: ${{ secrets.AZURE_CREDENTIALS }}

    - name: Terraform Init
      working-directory: ./terraform
      run: |
        terraform init \
          -backend-config="resource_group_name=${{ secrets.TF_STATE_RG }}" \
          -backend-config="storage_account_name=${{ secrets.TF_STATE_SA }}" \
          -backend-config="container_name=tfstate" \
          -backend-config="key=${{ env.TF_VAR_environment }}.terraform.tfstate"

    - name: Terraform Destroy
      working-directory: ./terraform
      run: terraform destroy -auto-approve