# values/superset-values.yaml - DEVELOPMENT VERSION

# Superset configuration overrides
configOverrides:
  secret: |
    SECRET_KEY = 'dev-secret-key-change-for-production'
    # Enable CORS for development
    ENABLE_CORS = True
    CORS_OPTIONS = {
      'supports_credentials': True,
      'allow_headers': ['*'],
      'resources': ['*'],
      'origins': ['http://localhost:8088']
    }

# Disable internal dependencies (we use external)
postgresql:
  enabled: false

redis:
  enabled: false

# Superset Node (web server) configuration
supersetNode:
  # Database connection to external PostgreSQL
  env:
    SUPERSET_DATABASE_URI: "postgresql://superset_user:dev-user-password@postgresql.database.svc.cluster.local:5432/superset"
    DB_HOST: postgresql.database.svc.cluster.local
    DB_PORT: "5432"
    DB_USER: superset_user
    DB_PASS: dev-user-password
    DB_NAME: superset

  # Development scaling - single replica
  replicaCount: 1

  # Development resource limits
  resources:
    limits:
      memory: 1Gi
      cpu: 500m
    requests:
      memory: 512Mi
      cpu: 250m

  # DISABLE Pod Disruption Budget for development
  podDisruptionBudget:
    enabled: false

  # DISABLE autoscaling for development
  autoscaling:
    enabled: false

# Superset Worker (Celery) configuration
supersetWorker:
  env:
    SUPERSET_DATABASE_URI: "postgresql://superset_user:dev-user-password@postgresql.database.svc.cluster.local:5432/superset"
    DB_HOST: postgresql.database.svc.cluster.local
    DB_PORT: "5432"
    DB_USER: superset_user
    DB_PASS: dev-user-password
    DB_NAME: superset
  # Single worker for development
  replicaCount: 1

  # Development resource limits
  resources:
    limits:
      memory: 512Mi
      cpu: 250m
    requests:
      memory: 256Mi
      cpu: 125m

  # DISABLE Pod Disruption Budget for development
  podDisruptionBudget:
    enabled: false

  # DISABLE autoscaling for development
  autoscaling:
    enabled: false

# Disable Celery Beat for development
supersetCeleryBeat:
  enabled: false

# Initial setup configuration
init:
  # Load example dashboards and data for development
  loadExamples: true

  # Create admin user
  createAdmin: true
  adminUser:
    username: admin
    firstname: Admin
    lastname: User
    email: admin@example.com
    password: admin # Simple password for development

# Service configuration
service:
  type: ClusterIP
  port: 8088

# External Redis configuration for caching (no auth for dev)
extraEnv:
  REDIS_HOST: redis.database.svc.cluster.local
  REDIS_PORT: "6379"
  REDIS_PASSWORD: "CHANGE-ME-REDIS-PASSWORD-789!"
  CACHE_CONFIG: |
    {
      'CACHE_TYPE': 'redis',
      'CACHE_DEFAULT_TIMEOUT': 300,
      'CACHE_KEY_PREFIX': 'superset_',
      'CACHE_REDIS_HOST': 'redis.database.svc.cluster.local',
      'CACHE_REDIS_PORT': 6379,
      'CACHE_REDIS_PASSWORD': 'CHANGE-ME-REDIS-PASSWORD-789!',  
      'CACHE_REDIS_DB': 1,
      'CACHE_REDIS_URL': 'redis://:CHANGE-ME-REDIS-PASSWORD-789!@redis.database.svc.cluster.local:6379/1' 
    }

# Ingress configuration (disabled for development - use port-forward)
ingress:
  enabled: false

# Security context
runAsUser: 1000

# Simple bootstrap script for development
bootstrapScript: |
  #!/bin/bash
  pip install --no-cache-dir \
    psycopg2-binary \
    redis
