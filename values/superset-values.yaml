# Superset configuration overrides using secrets
configOverrides:
  secret: |
    import os
    SECRET_KEY = os.environ.get('SUPERSET_SECRET_KEY', 'fallback-secret')
    # Enable CORS for development
    ENABLE_CORS = True
    CORS_OPTIONS = {
      'supports_credentials': True,
      'allow_headers': ['*'],
      'resources': ['*'],
      'origins': ['http://localhost:8088']
    }

serviceAccountName: "superset-workload-identity"

# Service account configuration
serviceAccount:
  create: false

# PostgreSQL configuration using existing secret AND workload identity
postgresql:
  enabled: true
  auth:
    existingSecret: "superset-secrets"
    secretKeys:
      adminPasswordKey: "postgres-password"
      userPasswordKey: "postgres-password"
    database: "superset"
    username: "superset"
  
  serviceAccount:
    create: false
    name: "superset-workload-identity"
  
  primary:
    persistence:
      enabled: true
      size: 10Gi
      storageClass: "managed-csi"
    
    podLabels:
      azure.workload.identity/use: "true"
    
    extraVolumes:
    - name: secrets-store
      csi:
        driver: secrets-store.csi.k8s.io
        readOnly: true
        volumeAttributes:
          secretProviderClass: "superset-secrets"
    
    extraVolumeMounts:
    - name: secrets-store
      mountPath: "/mnt/secrets-store"
      readOnly: true
    
    resources:
      limits:
        memory: 512Mi
        cpu: 500m
      requests:
        memory: 256Mi
        cpu: 250m

redis:
  enabled: true
  auth:
    enabled: false
  master:
    persistence:
      enabled: true
      size: 5Gi
      storageClass: "managed-csi"
    resources:
      limits:
        memory: 256Mi
        cpu: 200m
      requests:
        memory: 128Mi
        cpu: 100m

extraLabels:
  azure.workload.identity/use: "true"

extraVolumes:
- name: secrets-store
  csi:
    driver: secrets-store.csi.k8s.io
    readOnly: true
    volumeAttributes:
      secretProviderClass: "superset-secrets"

extraVolumeMounts:
- name: secrets-store
  mountPath: "/mnt/secrets-store"
  readOnly: true

extraEnv:
  SUPERSET_SECRET_KEY:
    valueFrom:
      secretKeyRef:
        name: superset-secrets
        key: secret-key

# Superset Node configuration
supersetNode:
  replicaCount: 1
  podLabels:
    azure.workload.identity/use: "true"
  resources:
    limits:
      memory: 1Gi
      cpu: 500m
    requests:
      memory: 512Mi
      cpu: 250m

# Superset Worker configuration
supersetWorker:
  replicaCount: 1
  podLabels:
    azure.workload.identity/use: "true"
  resources:
    limits:
      memory: 512Mi
      cpu: 250m
    requests:
      memory: 256Mi
      cpu: 125m

# Disable Celery Beat
supersetCeleryBeat:
  enabled: false

# Initial setup with admin password from secret
init:
  loadExamples: true
  createAdmin: true
  adminUser:
    username: admin
    firstname: Admin
    lastname: User
    email: admin@example.com
  podLabels:
    azure.workload.identity/use: "true"
  extraEnv:
    SUPERSET_ADMIN_PASSWORD:
      valueFrom:
        secretKeyRef:
          name: superset-secrets
          key: admin-password

service:
  type: ClusterIP
  port: 8088

ingress:
  enabled: false

runAsUser: 1000

bootstrapScript: |
  #!/bin/bash
  pip install --no-cache-dir \
    psycopg2-binary \
    redis \
    flask-cors