# Superset configuration overrides
configOverrides:
  secret: |
    import os
    # Debug environment variables
    print(f"DB_USER: {os.environ.get('DB_USER')}")
    print(f"DB_PASS: {os.environ.get('DB_PASS')}")
    print(f"DB_HOST: {os.environ.get('DB_HOST')}")
    print(f"DB_PORT: {os.environ.get('DB_PORT')}")
    print(f"DB_NAME: {os.environ.get('DB_NAME')}")
    SECRET_KEY = os.environ.get('SUPERSET_SECRET_KEY', 'fallback-secret')
    # Enable CORS for development (restrict in production)
    ENABLE_CORS = True
    CORS_OPTIONS = {
      'supports_credentials': True,
      'allow_headers': ['*'],
      'resources': ['*'],
      'origins': ['http://localhost:8088']
    }
    # Define SQLALCHEMY_DATABASE_URI
    SQLALCHEMY_DATABASE_URI = f"postgresql+psycopg2://{os.environ.get('DB_USER')}:{os.environ.get('DB_PASS')}@{os.environ.get('DB_HOST')}:{os.environ.get('DB_PORT')}/{os.environ.get('DB_NAME')}"

# Global service account for Azure Workload Identity
serviceAccountName: "superset-workload-identity"

# Service account configuration
serviceAccount:
  create: false

# PostgreSQL configuration
postgresql:
  enabled: true
  auth:
    existingSecret: "superset-secrets"
    secretKeys:
      adminPasswordKey: "postgres-password"
      userPasswordKey: "postgres-password"
    database: "superset"
    username: "superset"
  primary:
    persistence:
      enabled: true
      size: 10Gi
      storageClass: "managed-csi"
    resources:
      limits:
        memory: 512Mi
        cpu: 500m
      requests:
        memory: 256Mi
        cpu: 250m
    podLabels:
      azure.workload.identity/use: "true"

# Redis configuration
redis:
  enabled: true
  auth:
    enabled: false
  master:
    persistence:
      enabled: true
      size: 5Gi
      storageClass: "managed-csi"
    resources:
      limits:
        memory: 256Mi
        cpu: 200m
      requests:
        memory: 128Mi
        cpu: 100m

# Global labels for workload identity
extraLabels:
  azure.workload.identity/use: "true"

# Global CSI volume for Key Vault secrets
extraVolumes:
- name: secrets-store
  csi:
    driver: secrets-store.csi.k8s.io
    readOnly: true
    volumeAttributes:
      secretProviderClass: "superset-secrets"

extraVolumeMounts:
- name: secrets-store
  mountPath: "/mnt/secrets-store"
  readOnly: true

# Superset Node configuration
supersetNode:
  replicaCount: 1
  podLabels:
    azure.workload.identity/use: "true"
  resources:
    limits:
      memory: 1Gi
      cpu: 500m
    requests:
      memory: 512Mi
      cpu: 250m
  command:
  - /bin/sh
  - -c
  - |
    # Set environment variables
    export DB_USER=superset
    export DB_HOST=apache-superset-postgresql
    export DB_PORT=5432
    export DB_NAME=superset
    export DB_PASS=$(cat /mnt/secrets-store/superset-postgres-password)
    export SUPERSET_SECRET_KEY=$(cat /mnt/secrets-store/superset-secret-key)
    # Debug environment variables
    echo "DB_USER: $DB_USER"
    echo "DB_PASS: $DB_PASS"
    echo "DB_HOST: $DB_HOST"
    echo "DB_PORT: $DB_PORT"
    echo "DB_NAME: $DB_NAME"
    echo "SUPERSET_SECRET_KEY: $SUPERSET_SECRET_KEY"
    # Start Superset
    . {{ .Values.configMountPath }}/superset_bootstrap.sh; gunicorn --bind "0.0.0.0:{{ .Values.service.port }}" --access-logfile '-' --error-logfile '-' --workers 1 --worker-class gthread --threads 20 --timeout 60 --keep-alive 2 --max-requests 1000 --max-requests-jitter 100 --preload "superset.app:create_app()"

# Superset Worker configuration
supersetWorker:
  replicaCount: 1
  podLabels:
    azure.workload.identity/use: "true"
  resources:
    limits:
      memory: 512Mi
      cpu: 250m
    requests:
      memory: 256Mi
      cpu: 125m
  command:
  - /bin/sh
  - -c
  - |
    # Set environment variables
    export DB_USER=superset
    export DB_HOST=apache-superset-postgresql
    export DB_PORT=5432
    export DB_NAME=superset
    export DB_PASS=$(cat /mnt/secrets-store/superset-postgres-password)
    # Debug environment variables
    echo "DB_USER: $DB_USER"
    echo "DB_PASS: $DB_PASS"
    echo "DB_HOST: $DB_HOST"
    echo "DB_PORT: $DB_PORT"
    echo "DB_NAME: $DB_NAME"
    # Start Superset worker
    . {{ .Values.configMountPath }}/superset_bootstrap.sh; celery --app=superset.tasks.celery_app:app worker --pool=gevent --concurrency=20 -l INFO

# Disable Celery Beat
supersetCeleryBeat:
  enabled: false

# Initial setup with admin credentials
init:
  loadExamples: true
  createAdmin: true
  adminUser:
    username: admin
    firstname: Admin
    lastname: User
    email: admin@example.com
  podLabels:
    azure.workload.identity/use: "true"
  command:
  - /bin/sh
  - -c
  - |
    # Set environment variables
    export SUPERSET_ADMIN_PASSWORD=$(cat /mnt/secrets-store/admin-password)
    # Debug environment variable
    echo "SUPERSET_ADMIN_PASSWORD: $SUPERSET_ADMIN_PASSWORD"
    # Run init
    . {{ .Values.configMountPath }}/superset_bootstrap.sh; superset init

service:
  type: ClusterIP
  port: 8088

ingress:
  enabled: false

runAsUser: 1000

bootstrapScript: |
  #!/bin/bash
  pip install --upgrade pip
  pip install --no-cache-dir \
    psycopg2-binary \
    redis \
    flask-cors \
    gevent