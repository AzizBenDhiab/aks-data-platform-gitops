# values/superset-values.yaml

# Superset configuration overrides
configOverrides:
  secret: |
    import os
    SECRET_KEY = os.environ.get('SUPERSET_SECRET_KEY', 'CHANGE-ME-TO-A-STRONG-SECRET-KEY-FOR-PRODUCTION')
    
    # Production security settings
    WTF_CSRF_ENABLED = True
    WTF_CSRF_TIME_LIMIT = None
    
    # Session configuration
    PERMANENT_SESSION_LIFETIME = 1800  # 30 minutes
    
    # Security headers
    TALISMAN_ENABLED = True
    TALISMAN_CONFIG = {
        "force_https": False,  # Set to True if using HTTPS
        "content_security_policy": {
            "default-src": "'self'",
            "img-src": "'self' data:",
            "script-src": "'self' 'unsafe-inline' 'unsafe-eval'",
            "style-src": "'self' 'unsafe-inline'"
        }
    }

# Disable internal dependencies (we use external)
postgresql:
  enabled: false

redis:
  enabled: false

# Superset Node (web server) configuration
supersetNode:
  # Database connection to external PostgreSQL
  env:
    SUPERSET_DATABASE_URI: "postgresql://superset_user:CHANGE-ME-USER-PASSWORD-456!@postgresql.database.svc.cluster.local:5432/superset"
    SUPERSET_SECRET_KEY: "CHANGE-ME-TO-A-STRONG-SECRET-KEY-FOR-PRODUCTION"
  
  # Production scaling
  replicaCount: 3  # Multiple replicas for HA
  
  # Production resource limits
  resources:
    limits:
      memory: 4Gi
      cpu: 2000m
    requests:
      memory: 2Gi
      cpu: 1000m
  
  # Pod disruption budget for HA
  podDisruptionBudget:
    enabled: true
    minAvailable: 2
  
  # Autoscaling
  autoscaling:
    enabled: true
    minReplicas: 3
    maxReplicas: 10
    targetCPUUtilizationPercentage: 70
    targetMemoryUtilizationPercentage: 80

# Superset Worker (Celery) configuration
supersetWorker:
  replicaCount: 3  # Production workers
  
  # Production resource limits
  resources:
    limits:
      memory: 2Gi
      cpu: 1000m
    requests:
      memory: 1Gi
      cpu: 500m
  
  # Autoscaling for workers
  autoscaling:
    enabled: true
    minReplicas: 3
    maxReplicas: 15
    targetCPUUtilizationPercentage: 80

# Celery Beat (scheduler)
supersetCeleryBeat:
  enabled: true
  resources:
    limits:
      memory: 512Mi
      cpu: 250m
    requests:
      memory: 256Mi
      cpu: 125m

# Initial setup configuration
init:
  # Don't load examples in production
  loadExamples: false
  
  # Create admin user
  createAdmin: true
  adminUser:
    username: admin
    firstname: Admin
    lastname: User
    email: admin@yourcompany.com
    password: "CHANGE-ME-ADMIN-PASSWORD!"

# Service configuration
service:
  type: ClusterIP
  port: 8088
  annotations:
    service.beta.kubernetes.io/azure-load-balancer-internal: "false"

# External Redis configuration with authentication
extraEnv:
  REDIS_HOST: redis-master.database.svc.cluster.local
  REDIS_PORT: "6379"
  REDIS_PASSWORD: "CHANGE-ME-REDIS-PASSWORD-789!"
  
# Cache configuration for production
extraEnvRaw:
  - name: CACHE_CONFIG
    value: |
      {
        'CACHE_TYPE': 'redis',
        'CACHE_DEFAULT_TIMEOUT': 300,
        'CACHE_KEY_PREFIX': 'superset_',
        'CACHE_REDIS_HOST': 'redis-master.database.svc.cluster.local',
        'CACHE_REDIS_PORT': 6379,
        'CACHE_REDIS_PASSWORD': 'CHANGE-ME-REDIS-PASSWORD-789!',
        'CACHE_REDIS_DB': 1
      }

# Ingress configuration for production
ingress:
  enabled: true
  ingressClassName: nginx
  annotations:
    nginx.ingress.kubernetes.io/proxy-body-size: "50m"
    nginx.ingress.kubernetes.io/proxy-read-timeout: "300"
    nginx.ingress.kubernetes.io/proxy-send-timeout: "300"
    nginx.ingress.kubernetes.io/ssl-redirect: "true"
    cert-manager.io/cluster-issuer: "letsencrypt-prod"  # If using cert-manager
  hosts:
    - host: superset.yourcompany.com  # Change to your domain
      paths:
        - path: /
          pathType: Prefix
  tls:
    - secretName: superset-tls
      hosts:
        - superset.yourcompany.com

# Security context
runAsUser: 1000
fsGroup: 1000

# Production bootstrap script with additional packages
bootstrapScript: |
  #!/bin/bash
  pip install --no-cache-dir \
    psycopg2-binary \
    redis \
    celery[redis] \
    authlib \
    sqlalchemy-redshift \
    snowflake-sqlalchemy \
    pyhive[hive] \
    pybigquery \
    elasticsearch-dbapi
  
  # Additional security and monitoring packages
  pip install --no-cache-dir \
    flask-talisman \
    statsd

# Resource monitoring
resources:
  limits:
    memory: 4Gi
    cpu: 2000m
  requests:
    memory: 2Gi
    cpu: 1000m

# Health checks
livenessProbe:
  httpGet:
    path: /health
    port: http
  initialDelaySeconds: 120
  periodSeconds: 30
  timeoutSeconds: 10
  failureThreshold: 3

readinessProbe:
  httpGet:
    path: /health
    port: http
  initialDelaySeconds: 60
  periodSeconds: 10
  timeoutSeconds: 5
  failureThreshold: 3