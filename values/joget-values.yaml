# values/joget-values.yaml
# Joget DX using Bitnami Tomcat as base

# Global configuration
global:
  imageRegistry: ""
  imagePullSecrets: []
  storageClass: "managed-csi"

# Tomcat configuration
image:
  registry: docker.io
  repository: jogetworkflow/joget-dx8-tomcat9
  tag: "8.1.1"
  pullPolicy: IfNotPresent
  pullSecrets: []

# Deployment configuration
replicaCount: 1

# Service configuration
service:
  type: ClusterIP
  ports:
    http: 8080
    https: 9080
  nodePorts:
    http: ""
    https: ""
  sessionAffinity: None
  sessionAffinityConfig: {}
  clusterIP: ""
  loadBalancerIP: ""
  loadBalancerSourceRanges: []
  externalTrafficPolicy: Cluster
  annotations: {}
  extraPorts: []

# Persistence configuration
persistence:
  enabled: true
  storageClass: "managed-csi"
  accessModes:
    - ReadWriteOnce
  size: 10Gi
  dataSource: {}
  existingClaim: ""
  selector: {}
  annotations: {}
  mountPath: /opt/joget/wflow
  subPath: ""

# Resource limits
resources:
  limits:
    memory: 2Gi
    cpu: 1000m
  requests:
    memory: 1Gi
    cpu: 500m

# Security context
podSecurityContext:
  enabled: true
  fsGroup: 0

containerSecurityContext:
  enabled: true
  runAsUser: 1000
  runAsNonRoot: false

# Environment variables for database connection
extraEnvVars:
  - name: DB_HOST
    value: "postgresql"
  - name: DB_PORT
    value: "5432"
  - name: DB_NAME
    value: "joget"
  - name: DB_USER
    value: "joget_user"
  - name: DB_PASSWORD
    value: "joget_password"
  - name: JDBC_URL
    value: "jdbc:postgresql://postgresql:5432/joget"

# Extra volumes for Joget data
extraVolumes: []
extraVolumeMounts: []

# Init containers
initContainers: []

# Liveness and readiness probes
livenessProbe:
  enabled: true
  httpGet:
    path: /jw
    port: http
  initialDelaySeconds: 180
  periodSeconds: 30
  timeoutSeconds: 5
  failureThreshold: 6
  successThreshold: 1

readinessProbe:
  enabled: true
  httpGet:
    path: /jw
    port: http
  initialDelaySeconds: 60
  periodSeconds: 10
  timeoutSeconds: 5
  failureThreshold: 6
  successThreshold: 1

startupProbe:
  enabled: true
  httpGet:
    path: /jw
    port: http
  initialDelaySeconds: 60
  periodSeconds: 10
  timeoutSeconds: 5
  failureThreshold: 30
  successThreshold: 1

# Ingress configuration
ingress:
  enabled: false
  pathType: ImplementationSpecific
  apiVersion: ""
  hostname: joget.local
  path: /
  annotations: {}
  tls: false
  selfSigned: false
  extraHosts: []
  extraPaths: []
  extraTls: []
  secrets: []
  ingressClassName: ""
  extraRules: []

# Autoscaling
autoscaling:
  enabled: false
  minReplicas: 1
  maxReplicas: 11
  targetCPU: 50
  targetMemory: 50

# Pod disruption budget
pdb:
  create: false
  minAvailable: 1
  maxUnavailable: ""

# ServiceAccount
serviceAccount:
  create: true
  name: ""
  annotations: {}
  automountServiceAccountToken: true

# Pod annotations
podAnnotations:
  description: "Joget DX - Business Process & Workflow Engine"

# Pod labels
podLabels: {}

# Node selection
nodeSelector: {}

# Tolerations
tolerations: []

# Affinity
affinity: {}

# Pod anti-affinity preset
podAntiAffinityPreset: soft

# Node anti-affinity preset
nodeAffinityPreset:
  type: ""
  key: ""
  values: []

# Priority class
priorityClassName: ""

# Topology spread constraints
topologySpreadConstraints: []

# Scheduler name
schedulerName: ""

# Termination grace period
terminationGracePeriodSeconds: ""

# Lifecycle hooks
lifecycleHooks: {}

# Extra containers
extraContainers: []

# Pod security policy
podSecurityPolicy:
  enabled: false

# RBAC configuration
rbac:
  create: false

# Network policies
networkPolicy:
  enabled: false

# Metrics configuration
metrics:
  enabled: false

---
# Optional: Database Connection ConfigMap for Joget
apiVersion: v1
kind: ConfigMap
metadata:
  name: joget-db-config
  namespace: joget
data:
  database-host: "postgresql"
  database-port: "5432"
  database-name: "joget"
  database-user: "joget_user"
  connection-url: "jdbc:postgresql://postgresql:5432/joget"
