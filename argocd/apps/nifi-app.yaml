apiVersion: argoproj.io/v1alpha1
kind: Application
metadata:
  name: nifi-prod
  namespace: argocd
  annotations:
    argocd.argoproj.io/sync-wave: "3"
  finalizers:
    - resources-finalizer.argocd.argoproj.io
spec:
  project: default
  sources:
  # First source: Your manifests for ServiceAccount and SecretProviderClass
  - repoURL: https://github.com/AzizBenDhiab/aks-data-platform-gitops.git
    targetRevision: HEAD
    path: manifests/nifi
  # Second source: Helm chart with our custom values
  - repoURL: https://cetic.github.io/helm-charts
    targetRevision: "1.2.1"
    chart: nifi
    helm:
      values: |
        # START WITH SINGLE NODE TO FIX THE SECRET ISSUE FIRST
        replicaCount: 1

        image:
          repository: apache/nifi
          tag: "1.23.2"
          pullPolicy: IfNotPresent

        # Critical: Proper auth configuration
        auth:
          singleUser:
            username: admin
            password: ""  # This will be set by environment variable

        # Properties
        properties:
          sensitiveKey: ""  # This will be set by environment variable
          algorithm: NIFI_PBKDF2_AES_GCM_256
          webProxyHost: "nifi-prod.data-platform.local"
          isNode: false  # Start with single node first
          needClientAuth: false

        # CRITICAL: Configure the StatefulSet properly
        sts:
          # Use our service account with workload identity
          serviceAccount:
            create: false
            name: nifi-workload-identity
          
          # Pod configuration with secrets
          pod:
            labels:
              azure.workload.identity/use: "true"
            
            # Add init container to validate secrets
            initContainers:
            - name: secret-validator
              image: busybox:1.35
              command: ['sh', '-c']
              args:
                - |
                  echo "=== Secret Validation ==="
                  echo "Checking Azure Key Vault secrets..."
                  
                  if [ ! -d /mnt/secrets-store ]; then
                    echo "ERROR: Secrets store not mounted at /mnt/secrets-store"
                    ls -la /mnt/ || echo "No /mnt directory"
                    exit 1
                  fi
                  
                  echo "Secrets directory contents:"
                  ls -la /mnt/secrets-store/
                  
                  # Check required secrets
                  required_secrets="admin-password sensitive-key keystore-password truststore-password"
                  for secret in $required_secrets; do
                    if [ -f "/mnt/secrets-store/$secret" ]; then
                      secret_length=$(wc -c < "/mnt/secrets-store/$secret")
                      echo "✓ $secret found (${secret_length} chars)"
                      if [ $secret_length -lt 8 ]; then
                        echo "WARNING: $secret seems too short"
                      fi
                    else
                      echo "✗ $secret MISSING"
                      exit 1
                    fi
                  done
                  echo "All secrets validated successfully!"
              volumeMounts:
              - name: secrets-store
                mountPath: "/mnt/secrets-store"
                readOnly: true

            # Add the secrets volume
            volumes:
            - name: secrets-store
              csi:
                driver: secrets-store.csi.k8s.io
                readOnly: true
                volumeAttributes:
                  secretProviderClass: "nifi-secrets"

            # Add volume mount for main container
            volumeMounts:
            - name: secrets-store
              mountPath: "/mnt/secrets-store"
              readOnly: true

            # CRITICAL: Environment variables from secrets
            env:
            - name: NIFI_SENSITIVE_PROPS_KEY
              valueFrom:
                secretKeyRef:
                  name: nifi-secrets
                  key: sensitive-key
            - name: SINGLE_USER_CREDENTIALS_USERNAME
              value: "admin"
            - name: SINGLE_USER_CREDENTIALS_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: nifi-secrets
                  key: admin-password
            - name: KEYSTORE_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: nifi-secrets
                  key: keystore-password
            - name: TRUSTSTORE_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: nifi-secrets
                  key: truststore-password

        # Keep Zookeeper for future clustering
        zookeeper:
          enabled: true
          replicaCount: 3
          persistence:
            enabled: true
            size: 10Gi

        # Resources
        resources:
          requests:
            cpu: 500m
            memory: 2Gi
          limits:
            cpu: 1500m
            memory: 3Gi

        jvmMemory: 2g

        # Service
        service:
          type: ClusterIP
          httpsPort: 8443

        # Persistence
        persistence:
          enabled: true
          size: 50Gi

        # Probes with longer timeouts for secret loading
        startupProbe:
          httpGet:
            path: /nifi
            port: 8443
            scheme: HTTPS
          initialDelaySeconds: 120
          periodSeconds: 15
          timeoutSeconds: 10
          failureThreshold: 30

        readinessProbe:
          httpGet:
            path: /nifi
            port: 8443
            scheme: HTTPS
          initialDelaySeconds: 60
          periodSeconds: 10
          timeoutSeconds: 5
          failureThreshold: 3

        livenessProbe:
          httpGet:
            path: /nifi
            port: 8443
            scheme: HTTPS
          initialDelaySeconds: 180
          periodSeconds: 30
          timeoutSeconds: 10
          failureThreshold: 3

        # Security context
        securityContext:
          runAsUser: 1000
          runAsGroup: 1000
          fsGroup: 1000

  destination:
    server: https://kubernetes.default.svc
    namespace: nifi-prod
  
  syncPolicy:
    automated:
      prune: true
      selfHeal: true
    syncOptions:
      - CreateNamespace=true
    retry:
      limit: 5
      backoff:
        duration: 15s
        factor: 2
        maxDuration: 15m