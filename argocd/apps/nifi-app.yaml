apiVersion: argoproj.io/v1alpha1
kind: Application
metadata:
  name: nifi-prod
  namespace: argocd
  annotations:
    argocd.argoproj.io/sync-wave: "3"
  finalizers:
    - resources-finalizer.argocd.argoproj.io
spec:
  project: default
  sources:
  # Manifests for SecretProviderClass and ServiceAccount
  - repoURL: https://github.com/AzizBenDhiab/aks-data-platform-gitops.git
    targetRevision: HEAD
    path: manifests/nifi
  # Helm chart with dynamic authentication
  - repoURL: https://cetic.github.io/helm-charts
    targetRevision: "1.2.1"
    chart: nifi
    helm:
      values: |
        replicaCount: 3

        image:
          repository: apache/nifi
          tag: "1.23.2"
          pullPolicy: IfNotPresent

        # PROPER AUTHENTICATION: Use chart's built-in mechanism with placeholder credentials
        # These will be overridden by the init container
        auth:
          singleUser:
            username: "admin"  # Placeholder - will be overridden
            password: "temporaryPassword123"  # Placeholder - will be overridden

        # Properties configuration with SSL and dynamic authentication
        properties:
          sensitiveKey: "temporaryKey123456789"  # This will be overridden by Key Vault
          algorithm: "NIFI_PBKDF2_AES_GCM_256"
          webProxyHost: "nifi-prod.data-platform.local"
          isNode: false
          httpsPort: 8443
          httpPort: null
          webHttpsHost: "0.0.0.0"
          needClientAuth: false
          externalSecure: true  # Enable external SSL
          # Override nifi.properties to use our dynamic configuration
          safetyValve:
            # Force NiFi to use the authorizer we'll create dynamically
            nifi.security.user.authorizer: "managed-authorizer"
            nifi.security.user.login.identity.provider: "single-user-provider"
            # SSL Configuration - cert-manager will handle the certificates
            nifi.security.keystore: "/opt/nifi/nifi-current/conf/keystore.jks"
            nifi.security.keystoreType: "JKS"
            nifi.security.keystorePasswd: "changeme"
            nifi.security.truststore: "/opt/nifi/nifi-current/conf/truststore.jks"
            nifi.security.truststoreType: "JKS"
            nifi.security.truststorePasswd: "changeme"

        # Service account configuration
        sts:
          serviceAccount:
            create: false
            name: nifi-workload-identity
          pod:
            annotations:
              azure.workload.identity/use: "true"

        # Environment variables for Key Vault integration
        env:
          - name: NIFI_SENSITIVE_PROPS_KEY
            valueFrom:
              secretKeyRef:
                name: nifi-secrets
                key: sensitive-key
          - name: KEYSTORE_PASSWORD
            valueFrom:
              secretKeyRef:
                name: nifi-secrets
                key: keystore-password
          - name: TRUSTSTORE_PASSWORD
            valueFrom:
              secretKeyRef:
                name: nifi-secrets
                key: truststore-password

        # DYNAMIC AUTHENTICATION: Init container to override chart's authentication
        initContainers:
          - name: nifi-auth-config
            image: apache/nifi:1.23.2
            command: ["/bin/bash"]
            args:
              - -c
              - |
                echo "Setting up NiFi authentication from Azure Key Vault..."
                
                # Wait for secrets to be available
                while [ ! -f /mnt/secrets-store/nifi-admin-password ]; do
                  echo "Waiting for Key Vault secrets to be mounted..."
                  sleep 5
                done
                
                # Read credentials from mounted secrets
                USERNAME="admin"
                PASSWORD=$(cat /mnt/secrets-store/nifi-admin-password)
                SENSITIVE_KEY=$(cat /mnt/secrets-store/nifi-sensitive-key)
                
                echo "Configuring NiFi with username: $USERNAME"
                
                # Create shared config directory
                mkdir -p /shared-config
                
                # Create login-identity-providers.xml for single-user authentication
                cat > /shared-config/login-identity-providers.xml << EOF
                <?xml version="1.0" encoding="UTF-8" standalone="yes"?>
                <loginIdentityProviders>
                    <provider>
                        <identifier>single-user-provider</identifier>
                        <class>org.apache.nifi.authentication.single.user.SingleUserLoginIdentityProvider</class>
                        <property name="Username">$USERNAME</property>
                        <property name="Password">$PASSWORD</property>
                    </provider>
                </loginIdentityProviders>
                EOF
                
                # Create authorizers.xml with managed-authorizer (as expected by the chart)
                cat > /shared-config/authorizers.xml << EOF
                <?xml version="1.0" encoding="UTF-8" standalone="yes"?>
                <authorizers>
                    <userGroupProvider>
                        <identifier>file-user-group-provider</identifier>
                        <class>org.apache.nifi.authorization.FileUserGroupProvider</class>
                        <property name="Users File">./conf/users.xml</property>
                        <property name="Legacy Authorized Users File"></property>
                        <property name="Initial User Identity 1">$USERNAME</property>
                    </userGroupProvider>
                    <accessPolicyProvider>
                        <identifier>file-access-policy-provider</identifier>
                        <class>org.apache.nifi.authorization.FileAccessPolicyProvider</class>
                        <property name="User Group Provider">file-user-group-provider</property>
                        <property name="Authorizations File">./conf/authorizations.xml</property>
                        <property name="Initial Admin Identity">$USERNAME</property>
                        <property name="Legacy Authorized Users File"></property>
                        <property name="Node Identity 1"></property>
                    </accessPolicyProvider>
                    <authorizer>
                        <identifier>managed-authorizer</identifier>
                        <class>org.apache.nifi.authorization.StandardManagedAuthorizer</class>
                        <property name="Access Policy Provider">file-access-policy-provider</property>
                    </authorizer>
                </authorizers>
                EOF
                
                # Create flow.xml.gz if it doesn't exist (prevents startup issues)
                if [ ! -f /shared-config/flow.xml.gz ]; then
                  cat > /tmp/empty-flow.xml << 'FLOWEOF'
                <?xml version="1.0" encoding="UTF-8" standalone="yes"?>
                <flowController encoding-version="1.5">
                    <maxTimerDrivenThreadCount>10</maxTimerDrivenThreadCount>
                    <maxEventDrivenThreadCount>1</maxEventDrivenThreadCount>
                    <rootGroup>
                        <id>root-group</id>
                        <name>NiFi Flow</name>
                        <position x="0.0" y="0.0"/>
                        <comment></comment>
                    </rootGroup>
                    <controllerServices></controllerServices>
                    <reportingTasks></reportingTasks>
                </flowController>
                FLOWEOF
                  gzip -c /tmp/empty-flow.xml > /shared-config/flow.xml.gz
                fi
                
                # Set proper ownership
                chown -R 1000:1000 /shared-config
                
                echo "Authentication configuration completed successfully"
                echo "Username: $USERNAME"
                echo "Configuration files created in /shared-config:"
                ls -la /shared-config/
            volumeMounts:
              - name: secrets-store
                mountPath: "/mnt/secrets-store"
                readOnly: true
              - name: shared-config
                mountPath: /shared-config
            securityContext:
              runAsUser: 1000
              runAsGroup: 1000

        # Extra volumes for CSI secret store and shared configuration
        extraVolumes:
          - name: secrets-store
            csi:
              driver: secrets-store.csi.k8s.io
              readOnly: true
              volumeAttributes:
                secretProviderClass: "nifi-secrets"
          - name: shared-config
            emptyDir: {}

        # Extra volume mounts including shared configuration
        extraVolumeMounts:
          - name: secrets-store
            mountPath: "/mnt/secrets-store"
            readOnly: true
          - name: shared-config
            mountPath: /opt/nifi/nifi-current/conf-override

        # Post-start hook to copy configuration files and set single-user credentials
        postStart: |
          #!/bin/bash
          
          echo "Post-start: Setting up dynamic authentication..."
          
          # Copy the dynamically generated configuration files
          if [ -f /opt/nifi/nifi-current/conf-override/login-identity-providers.xml ]; then
            cp /opt/nifi/nifi-current/conf-override/login-identity-providers.xml /opt/nifi/nifi-current/conf/
            echo "Copied login-identity-providers.xml from init container"
          fi
          
          if [ -f /opt/nifi/nifi-current/conf-override/authorizers.xml ]; then
            cp /opt/nifi/nifi-current/conf-override/authorizers.xml /opt/nifi/nifi-current/conf/
            echo "Copied authorizers.xml from init container"
          fi
          
          if [ -f /opt/nifi/nifi-current/conf-override/flow.xml.gz ]; then
            cp /opt/nifi/nifi-current/conf-override/flow.xml.gz /opt/nifi/nifi-current/conf/
            echo "Copied flow.xml.gz from init container"
          fi
          
          # Read the actual password from Key Vault and set single-user credentials
          if [ -f /mnt/secrets-store/nifi-admin-password ]; then
            PASSWORD=$(cat /mnt/secrets-store/nifi-admin-password)
            SENSITIVE_KEY=$(cat /mnt/secrets-store/nifi-sensitive-key)
            echo "Setting single-user credentials..."
            
            # Update nifi.properties with the actual sensitive key from Key Vault
            sed -i "s|nifi.sensitive.props.key=.*|nifi.sensitive.props.key=$SENSITIVE_KEY|g" /opt/nifi/nifi-current/conf/nifi.properties
            
            # Set single-user credentials
            /opt/nifi/nifi-current/bin/nifi.sh set-single-user-credentials admin "$PASSWORD"
            echo "Single-user credentials and sensitive key configured successfully"
          fi

        # Resources configuration
        resources:
          requests:
            cpu: 500m
            memory: 2Gi
          limits:
            cpu: 1500m
            memory: 3Gi

        # JVM memory configuration
        jvmMemory: 2g

        # Persistence configuration
        persistence:
          enabled: true
          subPath:
            enabled: true
            name: nifi-data
            size: 50Gi

        # Service configuration
        service:
          type: ClusterIP
          httpPort: null
          httpsPort: 8443
          annotations: {}

        # Zookeeper configuration
        zookeeper:
          enabled: true
          replicaCount: 3

        # Security context
        securityContext:
          runAsUser: 1000
          runAsGroup: 1000
          fsGroup: 1000

        # SSL/TLS Configuration with cert-manager
        certManager:
          enabled: true
          clusterDomain: cluster.local
          keystorePasswd: changeme
          truststorePasswd: changeme
          additionalDnsNames:
            - nifi-prod.data-platform.local
            - localhost
          refreshSeconds: 300
          certDuration: 2160h  # 90 days
          caDuration: 87660h   # 10 years

        # Authentication configuration for SSL
        auth:
          singleUser:
            username: "admin"
            password: "temporaryPassword123"  # Will be overridden by Key Vault
          # SSL configuration is automatically handled by cert-manager

        # Probes configuration - give more time for dynamic setup
        startupProbe:
          enabled: true
          failureThreshold: 40
          periodSeconds: 15

        readinessProbe:
          enabled: true
          initialDelaySeconds: 180  # More time for configuration setup
          periodSeconds: 10
          timeoutSeconds: 5
          failureThreshold: 5

        livenessProbe:
          enabled: true
          initialDelaySeconds: 300  # More time for initial setup
          periodSeconds: 30
          timeoutSeconds: 10
          failureThreshold: 3

  destination:
    server: https://kubernetes.default.svc
    namespace: nifi-prod
  syncPolicy:
    automated:
      prune: true
      selfHeal: true
    syncOptions:
      - CreateNamespace=true
    retry:
      limit: 5
      backoff:
        duration: 15s
        factor: 2
        maxDuration: 15m